Hello - from c:\Users\agrippa\.vscode\extensions\jaredly.reason-vscode-1.5.2\bin.native.exe.hot.exe
Previous log location: C:\Users\agrippa\AppData\Local\Temp\lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","format_width":"80","per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/agrippa/Documents/GitHub/euclidean-sandbox/src/main.re","languageId":"reason","version":1,"text":"type point = (float, float);\r\ntype svg = string;\r\n\r\ntype line = (point, point);\r\ntype circle = (point, float);\r\n\r\ntype primitive = Line(line) | Circle(circle) | Point(point);\r\ntype ghost = Ghost(primitive);\r\ntype ghostWorld = list(ghost);\r\n\r\nexception Not_implemented;\r\n\r\nlet is_identical = (pr1 : primitive, pr2 : primitive) => raise(Not_implemented);\r\n\r\nlet circle_circle_intersections = (c1 : circle, c2 : circle) => \r\n    raise(Not_implemented);\r\n\r\nlet circle_line_intersections = (c : circle, l : line) =>\r\n    raise(Not_implemented);\r\n\r\nlet circle_point_intersections = (c : circle, p : point) =>\r\n    raise(Not_implemented);\r\n\r\nlet line_line_intersections = (l1 : line, l2 : line) => \r\n    raise(Not_implemented);\r\n\r\nlet line_point_intersections = (l : line, p: point) =>\r\n    raise(Not_implemented);\r\n\r\nlet find_intersections = (pr1, pr2) => \r\n    switch pr1 {\r\n    | Circle(c1) => \r\n        switch pr2 {\r\n        | Circle(c2) => circle_circle_intersections(c1, c2)\r\n        | Line(l2) => circle_line_intersections(c1, l2)\r\n        | Point(p2) => circle_point_intersections(c1, p2)\r\n        }\r\n    | Line(l1) =>\r\n        switch pr2 {\r\n        | Circle(c2) => circle_line_intersections(c2, l1)\r\n        | Line(l2) => line_line_intersections(l1, l2)\r\n        | Point(p2) => line_point_intersections(l1, p2)\r\n        }\r\n    | Point(p1) => \r\n        switch pr2 {\r\n        | Circle(c2) => circle_point_intersections(c2, p1)\r\n        | Line(l2) => line_point_intersections(l2, p1)\r\n        | Point(p2) => is_identical(Point(p1), Point(p2))\r\n        }\r\n    };\r\n\r\nlet nearest_point_on_circle = (pt: point, c:circle) => ()\r\nlet nearest_point_on_line = (pt: point, l: line) => ()\r\n\r\nlet nearest_point_on_primitive = (pt, pr) =>\r\n    switch pr {\r\n    | Circle(c) => ()\r\n    | Line(l) => ()\r\n    | Point(p) => (distance(pt, p), p)\r\n    }\r\n\r\nlet rec nearest_ghost = (~best = ?, pt : point, w : ghostWorld) =>\r\n    switch w {\r\n    | [] => best\r\n    | [g, ...remaining] => \r\n        let Ghost(pr) = g in \r\n        let (d1, x1) = nearest_point_on_primitive(pt, pr) in\r\n        let candidate = (d1, x1, g) in\r\n        switch best {\r\n        | None => nearest_ghost(~best = candidate, pt, remaining)\r\n        | Some incumbent => \r\n            let winner = max(candidate, incumbent) in\r\n            nearest_ghost(~best = winner, pt, remaining)\r\n        } \r\n    }"}}}
